
import java.io.*;
import java.util.*;

public class Main{
	
	static boolean[] visited;
	static ArrayList<Node>[] graph;
	static int maxVertex = 0;
	static int maxWeight = 0;
	
    public static void main(String[] args) throws IOException{
        
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	int n = Integer.parseInt(br.readLine());
    	graph = new ArrayList[n+1];			 

    	for (int i = 1; i <= n; i++) {	
			graph[i] = new ArrayList<>();	 
		}
    	
    	if (n == 1) {
			return;
		}
    	
    	for (int i = 1; i <= n; i++) {
    		StringTokenizer stn = new StringTokenizer(br.readLine());	
    		int parent = Integer.parseInt(stn.nextToken());
    		
    		while(true) {
    			int m = Integer.parseInt(stn.nextToken());
    			if (m == -1) {
					break;
				}
				int weight = Integer.parseInt(stn.nextToken());
				graph[parent].add(new Node(m,weight));
    		}
    	}
    	
    	visited = new boolean[n+1];
    	dfs(1, 0);	 
    	
    	visited = new boolean[n+1];
    	dfs(maxVertex, 0);	 
    	
    	System.out.println(maxWeight);
    	
}///    
    public static void dfs(int v, int w) {
    	visited[v] = true;
    	
    	if (maxWeight < w) {
    		maxWeight = w;
    		maxVertex = v;
		}
    	
    	for(Node node : graph[v]) {
    		if (!visited[node.vertex]) {
				dfs(node.vertex, w + node.weight);
			}
    	}
    }///
    	
    
}/////

class Node {
	int vertex;
	int weight;
	
	public Node(int vertex, int weight) {
		this.vertex = vertex;
		this.weight = weight;
	}
}/////
