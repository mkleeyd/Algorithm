import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static boolean[] visited;
	static int min = 0;
	static int v;
	static int e;
	static LinkedList<Node>[] graph;
	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());	 
		e = Integer.parseInt(st.nextToken());	 
		
		graph = new LinkedList[v+1]; 
		
		for (int i = 1; i < v + 1; i++) {
			graph[i] = new LinkedList<>();
		}
		
		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			int v1 = Integer.parseInt(st.nextToken());
			int v2 = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			
			graph[v1].add(new Node(v2, weight));
			graph[v2].add(new Node(v1, weight));
		}
	
		visited = new boolean[v+1];	 
		prim(1);
		
		System.out.println(min);
		 
		br.close();
	}///
	
	public static void prim(int start) {
		Queue<Node> pque = new PriorityQueue<Node>();
		pque.offer(new Node(start, 0));		
		int count = 0;	
		
		while(!pque.isEmpty()) {
			Node curNode = pque.poll();
			if (!visited[curNode.to_vertex]) {
				visited[curNode.to_vertex] = true;
				
				min += curNode.weight;
				for(Node node : graph[curNode.to_vertex]) {
					if (!visited[node.to_vertex]) {
						pque.offer(node);
					}
				}
				if ( ++ count == v )break;
			}
		}
	}///
	
	static class Node implements Comparable<Node>{
		int to_vertex;
		int weight;
		
		public Node(int to_vertex, int weight
					) {
			this.to_vertex = to_vertex;
			this.weight = weight;
		}///
		
		@Override
		public int compareTo(Node o) {
			return Integer.compare(this.weight, o.weight);
		}
		
	}/////
	
}/////
