import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int n;			 
	static int[][] arr;		
	static long[][] dp;		
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine()); 
		
		arr = new int[n][n];			 
		for (int i = 0; i < n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		dp = new long[n][n];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = -1;
			}
		}
		long ans = dfs(0, 0);	 
		System.out.println(ans);
	}///
	public static long dfs(int rowIdx, int columnIdx) {
		int moveInt = arr[rowIdx][columnIdx];
		
		if (dp[rowIdx][columnIdx] != -1) {
			return dp[rowIdx][columnIdx];
		}
		
		if (rowIdx == n-1 && columnIdx == n-1) {
			return 1;
		}
		
		dp[rowIdx][columnIdx] = 0;
		
		if (columnIdx + moveInt <= n - 1){
			dp[rowIdx][columnIdx] = Math.max(dp[rowIdx][columnIdx], dp[rowIdx][columnIdx] + dfs(rowIdx, columnIdx + moveInt));	// 우측으로 이동(재귀+메모리제이션 사용한 방식)
		}
		
		if (rowIdx + moveInt <= n - 1){
			dp[rowIdx][columnIdx] = Math.max(dp[rowIdx][columnIdx], dp[rowIdx][columnIdx] + dfs(rowIdx + moveInt, columnIdx));	// 아래로 이동(재귀+메모리제이션 사용한 방식)
		}
		return dp[rowIdx][columnIdx];
	}///	

}/////
