import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int v,e;
	static ArrayList<Integer>[] graph;
	static boolean[] visited;
	static StringBuilder sb;
	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());		 
		e = Integer.parseInt(st.nextToken());		 
		int start = Integer.parseInt(st.nextToken());	 

		sb = new StringBuilder();
		graph = new ArrayList[v+1];	 

		for (int i = 1; i < v+1; i++) {
			graph[i] = new ArrayList();
		}

		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			int v1 = Integer.parseInt(st.nextToken());
			int v2 = Integer.parseInt(st.nextToken());

			graph[v1].add(v2);
			graph[v2].add(v1);
		}
		
		for (int i = 1; i < v+1; i++) {
			Collections.sort(graph[i]);
		}
		
		
		
		visited = new boolean[v+1];
		dfs(start);
		sb.append("\n");
        
		visited = new boolean[v+1];
		bfs(start);
		System.out.println(sb);

	}///

	public static void dfs(int index) {
		visited[index] = true;
		sb.append(index).append(" ");
		for (int i = 1; i < v+1; i++) {
			for (int j = 0; j < graph[index].size(); j++) {
				int nextVertex = graph[index].get(j);
				if (!visited[nextVertex]) {
					dfs(nextVertex);
				}
			}
		}
	}///

	
	public static void bfs(int index) {
		visited[index] = true;
		sb.append(index).append(" ");
		Queue<Integer> que = new LinkedList<Integer>();
		que.offer(index);
		
		while(!que.isEmpty()) {
			int currIdx = que.poll();
			for(int next : graph[currIdx]) {
				if (!visited[next]) {
					visited[next] = true;
					sb.append(next).append(" ");
					que.offer(next);
				}
			}
		}
		
	}///
 

}/////
