import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	static int m,n,location;
	static boolean[][] visited;
	static int[][] arr;
	static int[] dx = {1,-1,0,0};  
	static int[] dy = {0,0,1,-1};  
	static StringBuilder sb;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int testcase = Integer.parseInt(br.readLine());		 
		sb = new StringBuilder();
		
		for (int i = 0; i < testcase; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			m = Integer.parseInt(st.nextToken());	 
			n = Integer.parseInt(st.nextToken());	 
			location = Integer.parseInt(st.nextToken());
			arr = new int[m][n];
			for (int j = 0; j < location; j++) {
				st = new StringTokenizer(br.readLine());
				int v1 = Integer.parseInt(st.nextToken());	
				int v2 = Integer.parseInt(st.nextToken());	
				
				arr[v1][v2] = 1;
			}
			logic();
		}
		System.out.println(sb);
	}///
	
	public static void logic() {
		int total = 0;
		visited = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (arr[i][j] == 1 && !visited[i][j]) {
					total++;
					dfs(i,j);
				}
			}
		}
		sb.append(total).append("\n");
	}///
	
	public static void dfs(int x, int y) {
		visited[x][y] = true;
		
		for (int i = 0; i < 4; i++) {
			int xx = x + dx[i];
			int yy = y + dy[i];
			
			if (xx < m && yy < n && xx >= 0 && yy >= 0 && !visited[xx][yy] && arr[xx][yy] == 1) {
				dfs(xx,yy);
			}
			
		}
		
	}///
}/////
	
