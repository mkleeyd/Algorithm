import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	static int m,n;
	static int cnt;
	static int[][] dp;
	static int[][] arr;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		m = Integer.parseInt(st.nextToken());	 
		n = Integer.parseInt(st.nextToken());	 
		arr = new int[m+1][n+1];
		
		for (int i = 1; i <= m; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		dp = new int[m+1][n+1];
		for(int[] a : dp) {
			Arrays.fill(a, 10001);
		}
		System.out.println(dfs(m,n));
	}///
	
	public static int dfs(int x, int y) {
		
		if (x == 1 && y == 1) {
			return 1;
		}
		
		if (x < 1 || y < 1) {
			return 0;
		}
		if (x > m || y > n) {
			return 0;
		}
		
		if (dp[x][y] == 10001) {
			dp[x][y] = 0;
			if (y > 1 && arr[x][y] < arr[x][y-1]) {
				dp[x][y] += dfs(x,y-1);
			}
			if(x > 1 && arr[x][y] < arr[x-1][y]) {
				dp[x][y] += dfs(x-1, y);
			}
			if (y < n && arr[x][y] < arr[x][y+1]) {
				dp[x][y] += dfs(x,y+1);
			}
			if (x < m && arr[x][y] < arr[x+1][y]) {
				dp[x][y] += dfs(x+1,y);
			}
		}
		return dp[x][y];
	}///
	
	
	
	
	
	
	
	

}/////
