import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Node{
	char data;
	Node left;
	Node right;
	
	public Node(char data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}/////

class Tree{
	Node root;
	
	public void createNode(char data, char left, char right) {
		if (root == null) {
			root = new Node(data);
			if (left != '.') {
				root.left = new Node(left);
			}
			if (right != '.') {
				root.right = new Node(right);
			}
		}
		else {
			searchNode(root, data, left, right);
		}
	}///
	
	public void searchNode(Node root, char data, char left, char right) {
		if (root != null) {
			if (root.data == data) {
				if (left != '.') {
					root.left = new Node(left);
				}
				if (right != '.') {
					root.right = new Node(right);
				}
			}
			else {
				searchNode(root.left, data, left, right);
				searchNode(root.right, data, left, right);
			}
		}
		else {
			return;
		}
	}///
	
	public void preorder(Node root) {
		if (root != null) {
			System.out.print(root.data);
			preorder(root.left);
			preorder(root.right);
		}
	}
	
	public void inorder(Node root){
		if (root != null) {
			inorder(root.left);
			System.out.print(root.data);
			inorder(root.right);
		}
	}
	
	public void postorder(Node root){
		if (root != null) {
			postorder(root.left);
			postorder(root.right);
			System.out.print(root.data);
		}
	}
	
	
}/////

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		
		Tree tree = new Tree();

		for(int i = 0; i < N; i++) {
			char[] data;
			data = br.readLine().replaceAll(" ", "").toCharArray();		
			tree.createNode(data[0], data[1], data[2]);
		}
		
		tree.preorder(tree.root);
		System.out.println();
	
		tree.inorder(tree.root);
		System.out.println();
		
		tree.postorder(tree.root);
		
		br.close();
		
		
	}///
}////
