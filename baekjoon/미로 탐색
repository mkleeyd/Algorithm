import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int m,n;
	static int[][] arr;
	static int[] dx = {1,-1,0,0}; 
	static int[] dy = {0,0,1,-1};  
	static boolean[][] visited;
	static int ans = Integer.MAX_VALUE;
	static int[][] result;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());	 
		n = Integer.parseInt(st.nextToken());	 
		arr = new int[m+1][n+1];
		result = new int[m+1][n+1];
		
		for (int i = 1; i < m+1; i++) {
			String input = br.readLine();
			for (int j = 1; j < n+1; j++) {
				arr[i][j] = input.charAt(j-1)-'0';	
			}
		}
		
		visited = new boolean[m+1][n+1];
		bfs(1,1);
		
	}///
	
	private static void bfs(int y, int x) {
		Queue<Node> que = new LinkedList<Node>();
		que.offer(new Node(y,x));
		visited[y][x] = true;
		
		while(!que.isEmpty()) {
			Node current = que.poll();
			for (int i = 0; i < 4; i++) {
				int yy = current.y + dy[i];
				int xx = current.x + dx[i];
				
				if (yy <= m && xx <= n && yy >= 1 && xx >= 1 && !visited[yy][xx] && arr[yy][xx] == 1) {
					visited[yy][xx] = true;
					que.offer(new Node(yy,xx));
					result[yy][xx] = result[current.y][current.x]+1;
				}
			}
		}
		System.out.println(result[m][n]+1);
	}///
	
	
	private static class Node{
		int x;
		int y;
		
		public Node(int y, int x) {
			this.x = x;
			this.y = y;
		}
		
	}/////
	
	
	
	
	
}/////
