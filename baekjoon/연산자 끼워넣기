import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	static int[] arr;	 
	static int[] oper;	 
	static int n;		 
	static int Max = Integer.MIN_VALUE;		 
	static int Min = Integer.MAX_VALUE;		 
	public static void main(String[] args) throws IOException {
		
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		arr = new int[n];
		oper = new int[4];
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		for (int i = 0; i < n; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}
		
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < oper.length; i++) {
			oper[i] = Integer.parseInt(st.nextToken());
		}
		
		dfs(arr[0], 1);	
		
		System.out.println(Max);
		System.out.println(Min);
		
	}///
	public static void dfs(int result, int idx) {
		if(idx == n) {
			Max = Math.max(Max, result);	 
			Min = Math.min(Min, result);	 
			return;							 
		}
		for (int i = 0; i < 4; i++) {
			
			if(oper[i] > 0) {
				oper[i]--;
				
				if(i == 0) {
					dfs(result + arr[idx], idx + 1); 
				}
				else if(i == 1) {
					dfs(result - arr[idx], idx + 1); 
				}
				else if(i == 2) {
					dfs(result * arr[idx], idx + 1);
				}
				else if(i == 3) {
					dfs(result / arr[idx], idx + 1);
				}
				oper[i]++;
				
			}
		}
		
	}///
	
}/////


