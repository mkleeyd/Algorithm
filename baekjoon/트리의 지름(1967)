import java.io.*;
import java.util.*;

public class Main{
    static ArrayList<Node>[] graph;	
    static boolean[] visited;		
    static int maxweight = 0;				
    static int maxvertex = 0;				
    public static void main(String[] args) throws IOException{
        
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	int n = Integer.parseInt(br.readLine());
    	
    	graph = new ArrayList[n+1];
    	graph[0] = new ArrayList<>();
    	
    	for (int i = 1; i <= n; i++) {
			graph[i] = new ArrayList<>();
		}
    	
    	for (int i = 1; i <= n - 1; i++) {	
			StringTokenizer stn = new StringTokenizer(br.readLine());
			int parent = Integer.parseInt(stn.nextToken());
			int child = Integer.parseInt(stn.nextToken());
			int weight = Integer.parseInt(stn.nextToken());
			
			
			graph[parent].add(new Node(child, weight));
			graph[child].add(new Node(parent, weight));
		}
    	
    
    	visited = new boolean[n+1];
    	dfs(1, 0);		
    	
    	visited = new boolean[n+1];
    	dfs(maxvertex, 0);	
    	
    	System.out.println(maxweight);
        
        br.close();
    	
    }///
    
    public static void dfs(int v, int w) {
    	visited[v] = true;	
    	
    	if (maxweight < w) {
    		maxweight = w;
    		maxvertex = v;
		}
    	
    	for (Node node : graph[v]) {		
			if (!visited[node.vertex]) {	
				dfs(node.vertex, w + node.weight);	
			}
		}
    }///
    
}/////


class Node{
	int vertex;
	int weight;	
	
	public Node(int vertex, int weight) {
		this.vertex = vertex;
		this.weight = weight;
	}///
}/////
