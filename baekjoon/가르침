import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.StringTokenizer;

public class Main {
	
	static int N;  
	static int K; 
	static boolean[] visited = new boolean[26]; 
	static int max = 0;
	static String[] strArr; 
	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K =	Integer.parseInt(st.nextToken());
		strArr = new String[N];
		
		if (K < 5) {
			System.out.println(0);
			return;
		}
		else if(K >= 26) {
			System.out.println(N);
			return;
		}
		else {
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				String str = st.nextToken();
				strArr[i] = str.substring(4,str.length()-4); 
			}
			K -= 5;
			
			visited['a'-'a'] = true;
			visited['c'-'a'] = true;
			visited['i'-'a'] = true;
			visited['n'-'a'] = true;
			visited['t'-'a'] = true;
			
			dfs(0,0);	
			System.out.println(max);
		}
		br.close();
	}///
	
	public static void dfs(int start, int ending) {
		
		if (ending == K) {
			int result = 0;
			for (int i = 0; i < N; i++) {
				boolean flag = true;	
				for (int j = 0; j < strArr[i].length(); j++) {
					char chr = strArr[i].charAt(j);
					if (!visited[chr-'a']) {
						flag = false;
						break;
					}
				}
				if(flag) result++;
			}
			max = Math.max(max, result);
			return;
		}
		
		for (int i = start; i < 26; i++) {
			if (!visited[i]) {
				visited[i] = true;	 
				dfs(i,ending+1);	
				visited[i] = false;	
			}
		}
		
		
	}///
	
	
}/////


