import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static boolean[] visited;		 
	static int node;
	static int edge;
	static ArrayList<Node>[] graph;
	static int[] dist;				 
	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		node = Integer.parseInt(br.readLine());
		edge = Integer.parseInt(br.readLine());
		graph = new ArrayList[node+1];
		
		dist = new int[node+1];   
		Arrays.fill(dist, Integer.MAX_VALUE); 

		StringTokenizer st;
		
		for (int i = 1; i < node+1; i++) {
			graph[i] = new ArrayList<Node>();
		}

		for (int i = 0; i < edge; i++) {
			st = new StringTokenizer(br.readLine());
			int n1 = Integer.parseInt(st.nextToken());
			int n2 = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			graph[n1].add(new Node(n2, weight));			 
		}
			
		st = new StringTokenizer(br.readLine());
		int start = Integer.parseInt(st.nextToken());
		int ending = Integer.parseInt(st.nextToken());		
		
		visited = new boolean[node+1];	 
		int result = dijkstra(start,ending);
		System.out.println(result);
		
		br.close();
	}///
	
	public static int dijkstra(int start, int ending) {
		Queue<Node> pque = new PriorityQueue<Node>();
		pque.offer(new Node(start, 0));
		dist[start] = 0;				
		
		while(!pque.isEmpty()) {
			Node currentNode = pque.poll();
			int idx = currentNode.nextNode;
			
		    if (!visited[idx]) {
                visited[idx] = true;
 
                for (int i = 0; i < graph[idx].size(); i++) {
					int n = graph[idx].get(i).nextNode;
					int w = graph[idx].get(i).weight;
					if (!visited[n] && dist[n] > dist[idx] + w) {
						dist[n] = dist[idx] + w;
						 pque.offer(new Node(n, dist[n]));
					}
				}
	    	}
        }
        return dist[ending];
	}///
	
	
	static class Node implements Comparable<Node>{
		int nextNode;		 
		int weight;			 
		
		public Node(int nextNode, int weight) {
			this.nextNode = nextNode;
			this.weight = weight;
		}///
		
		@Override
		public int compareTo(Node o) {
			return this.weight - o.weight;
		}
		
	}/////
}/////
